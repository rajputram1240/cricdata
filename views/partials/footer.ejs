<!-- footer.ejs -->
<div class="footer">
    <p>Â© <%= year %> Cricket Portal. All rights reserved. | <a href="#">Privacy Policy</a></p>
  </div>

  <!-- Bootstrap JS and Popper.js -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>
  
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <% if (activePage === 'head2head') { %>
    <script>
      const leagueSelect = document.getElementById('league');
      const team1Select = document.getElementById('team1');
      const team2Select = document.getElementById('team2');
      const matchesDiv = document.getElementById('matches');
    
      // Fetch leagues on page load and populate the league select box
      document.addEventListener('DOMContentLoaded', async () => {
        try {
          const response = await fetch('/league');
          const leagues = await response.json();
    
          if (Array.isArray(leagues) && leagues.length > 0) {
            // Populate league dropdown
            leagueSelect.innerHTML = '<option value="">Select League</option>';
            leagues.forEach(league => {
              leagueSelect.innerHTML += `<option value="${league}">${league}</option>`;
            });
          } else {
            console.error('No leagues found.');
            alert('No leagues available at the moment.');
          }
        } catch (error) {
          console.error('Error fetching leagues:', error);
          alert('An error occurred while fetching leagues.');
        }
      });
    
      // Function to get matches from the backend
      async function getMatches() {
        const league = leagueSelect.value;
        const team1 = team1Select.value;
        const team2 = team2Select.value;
    
        if (!league || !team1 || !team2) {
          alert('Please select a league and two teams.');
          return;
        }
    
        try {
          const response = await fetch(`/head2head?team1=${team1}&team2=${team2}`);
          const matches = await response.json();
    
          // Display the matches
          matchesDiv.innerHTML = matches.length
            ? matches.map(match => `
              <div class="match-card">
                <h5>${match.matchInfo.team1} vs ${match.matchInfo.team2}</h5>
                <p><strong>League:</strong> ${match.matchInfo.league}</p>
                <p><strong>Match Date:</strong> ${new Date(match.matchInfo.matchDate).toLocaleDateString()}</p>
                <p><strong>Venue:</strong> ${match.matchInfo.venue}</p>
                <a class="btn btn-info" href="/scorecard/${match._id}">View Scorecard</a>
              </div>
            `).join('')
            : 'No matches found.';
        } catch (error) {
          console.error('Error fetching matches:', error);
          alert('An error occurred while fetching the matches.');
        }
      }
    
      // Function to populate teams based on selected league
      leagueSelect.addEventListener('change', async () => {
        const league = leagueSelect.value;
        if (!league) return;
    
        try {
          const response = await fetch(`/getAllLeagueTeam?league=${league}`);
          const teams = await response.json();
          
          // Populate team 1 and team 2 dropdowns
          updateTeamSelects(teams);
        } catch (error) {
          console.error('Error fetching teams:', error);
          alert('An error occurred while fetching teams.');
        }
      });
    
      // Update team selects with the list of teams
      function updateTeamSelects(teams) {
        team1Select.innerHTML = '<option value="">Select Team 1</option>';
        team2Select.innerHTML = '<option value="">Select Team 2</option>';
    
        teams.forEach(team => {
          const option = `<option value="${team}">${team}</option>`;
          team1Select.innerHTML += option;
          team2Select.innerHTML += option;
        });
      }
    
      // Update the teams in the select boxes based on the selections
      team1Select.addEventListener('change', function() {
        updateTeamOptions();
      });
    
      team2Select.addEventListener('change', function() {
        updateTeamOptions();
      });
    
      // Function to update the available options based on team selection
      function updateTeamOptions() {
        const team1Selected = team1Select.value;
        const team2Selected = team2Select.value;
    
        // Remove the selected team from the other dropdown
        team2Select.querySelectorAll('option').forEach(option => {
          option.disabled = option.value === team1Selected || option.value === team2Selected;
        });
    
        team1Select.querySelectorAll('option').forEach(option => {
          option.disabled = option.value === team1Selected || option.value === team2Selected;
        });
      }
    </script>
  <% } else if(activePage === 'venue') { %>
    <script>
      // Fetch and populate venues in the select box
      document.addEventListener('DOMContentLoaded', async function() {
        const venueSelect = document.getElementById('venueSelect');
  
        try {
          const response = await fetch('/venues');
          const venues = await response.json();
  
          // Populate the select box with venues
          venueSelect.innerHTML += venues.map(venue => `
            <option value="${venue}">${venue}</option>
          `).join('');
        } catch (error) {
          console.error('Error fetching venues:', error);
          alert('An error occurred while fetching venues.');
        }
  
        // Add an event listener to fetch matches when a venue is selected
        venueSelect.addEventListener('change', async function() {
          const venueId = venueSelect.value;
          const matchCardsDiv = document.getElementById('matchCards');
  
          if (!venueId) {
            matchCardsDiv.innerHTML = '<p>Please select a venue to see matches.</p>';
            return;
          }
  
          try {
            const response = await fetch(`/matchByVenue?venue=${venueId}`);
            const matches = await response.json();
  
            // Display matches
            matchCardsDiv.innerHTML = matches.length > 0 
              ? matches.map(match => `
                <div class="match-card">
                  <h5>${match.matchInfo.team1} vs ${match.matchInfo.team2}</h5>
                  <p><strong>Match Date:</strong> ${new Date(match.matchInfo.matchDate).toLocaleDateString()}</p>
                  <p><strong>League:</strong> ${match.matchInfo.league}</p>
                  <a href="scorecard/${match._id}" class="btn btn-primary">View Scorecard</a>
                </div>
              `).join('')
              : '<p>No matches found for the selected venue.</p>';
          } catch (error) {
            console.error('Error fetching matches:', error);
            alert('An error occurred while fetching matches.');
          }
        });
      });
    </script>

    <% } else if(activePage === 'scorecard') { %>

    <script>
      document.addEventListener('DOMContentLoaded', async function() {
      
        const matchId = "<%= matchId %>";
        
        if (!matchId) {
          alert('Match ID is missing.');
          return;
        }
  
        try {
          const response = await fetch(`/matchDetails?matchId=${matchId}`);
          const match = await response.json();
  
          if (!match) {
            alert('Match details not found.');
            return;
          }
  
          const matchDetailsDiv = document.getElementById('match-details');
          matchDetailsDiv.innerHTML = `
            <div class="card mb-4">
              <div class="card-header">
                ${match.matchInfo.team1} vs ${match.matchInfo.team2}
              </div>
              <div class="card-body">
                <p><strong>Match Date:</strong> ${new Date(match.matchInfo.matchDate).toLocaleDateString()}</p>
                <p><strong>Venue:</strong> ${match.matchInfo.venue}</p>
                <p><strong>League:</strong> ${match.matchInfo.league}</p>
                <h4>Scorecard</h4>
                ${generateScorecard(match.scoreCard)}
              </div>
            </div>
          `;
        } catch (error) {
          console.error('Error fetching match details:', error);
          alert('An error occurred while fetching the match details.');
        }
      });
  
      function generateScorecard(scoreCard) {
        let html = '';
  
        scoreCard.forEach((innings) => {
          if (innings.innings.includes('Batting')) {
            html += `
              <h5>${innings.innings}</h5>
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Batsman</th>
                    <th>Dismissal</th>
                    <th>Runs</th>
                    <th>Balls</th>
                    <th>Mins</th>
                    <th>4s</th>
                    <th>6s</th>
                    <th>SR</th>
                  </tr>
                </thead>
                <tbody>
                  ${innings.data.map(player => `
                    <tr>
                      <td>${player.Batsman}</td>
                      <td>${player.Dismissal}</td>
                      <td>${player.R}</td>
                      <td>${player.Balls}</td>
                      <td>${player.Mins}</td>
                      <td>${player['4s']}</td>
                      <td>${player['6s']}</td>
                      <td>${player.SR}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            `;
          } else if (innings.innings.includes('Bowling')) {
            html += `
              <h5>${innings.innings}</h5>
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Bowler</th>
                    <th>O</th>
                    <th>Md</th>
                    <th>R</th>
                    <th>W</th>
                    <th>Eco</th>
                    <th>Wd</th>
                    <th>Nb</th>
                  </tr>
                </thead>
                <tbody>
                  ${innings.data.map(bowler => `
                    <tr>
                      <td>${bowler.Bowler}</td>
                      <td>${bowler.O}</td>
                      <td>${bowler.Md}</td>
                      <td>${bowler.R}</td>
                      <td>${bowler.W}</td>
                      <td>${bowler.Eco}</td>
                      <td>${bowler.Wd}</td>
                      <td>${bowler.Nb}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            `;
          }
        });
  
        return html;
      }
    </script>

    <% } %>
  
  